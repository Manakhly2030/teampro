[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Candidate",
  "enabled": 1,
  "modified": "2021-03-11 17:15:57.158190",
  "name": "Candidate-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Candidate', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tvalidate(frm){\n// \t    var checks=[]\n// \t    var check = 0\n// \t   // console.log(\"hi\")\n// \t    $.each(frm.doc.experience_details, function (i, d) {\n// \t\t\tcheck += Number(d.latest_work_experience)\n// \t\t})\n// \t\tchecks.push(check)\n// \t\tconsole.log(checks)\n// \t\tif (checks > 1 ){\n// \t\t\tfrappe.throw(\"Is Latest values should not repeat in Experience Details\");\n// \t\t}\n        // $.each(frm.doc.driving_licence, function (i, d) {\n        //     console.log(d.doi)\n        //     $(d.doi).datepicker({\n        //       maxDate: 0\n        //     });\n        //     if(d.doi>d.doe){\n        //         frappe.throw(\"DOE should be after DOI\")\n        //     }\n        // })\n\t},\n\tonload(frm){\n\t    frm.set_query('project', () => {\n    return {\n        filters: {\n            customer: frm.doc.customer\n        }\n    }\n})\nfrm.set_query('task', () => {\n    return {\n        filters: {\n            project: frm.doc.project\n        }\n    }\n})\n// \t    frm.fields_dict['candidate_task'].grid.get_field(\"task\").get_query = function(doc, cdt, cdn) {\n//     var child = locals[cdt][cdn]\n// \treturn {\n// \t\tfilters: [\n// \t\t\t['Task', 'project', '=', child.project]\n// \t\t]\n// \t}\n// },\nfrm.fields_dict['table_28'].grid.get_field(\"specialization\").get_query = function(doc, cdt, cdn) {\n    var child = locals[cdt][cdn]\n\treturn {\n\t\tfilters: [\n\t\t\t['Specialization', 'category', '=', child.category]\n\t\t]\n\t}\n}\nfrm.fields_dict['candidate_task'].grid.get_field(\"project\").get_query = function(doc, cdt, cdn) {\n    var child = locals[cdt][cdn]\n\treturn {\n\t\tfilters: [\n\t\t\t['Project', 'customer', '=', child.customer]\n\t\t]\n\t}\n}\n\t},\n\tindia_experience(frm){\n\t    if(frm.doc.overseas_experience){\n\t    var total = (frm.doc.india_experience + frm.doc.overseas_experience)\n\t    frm.set_value(\"total_experience\",total)\n\t    }\n\t    else{\n\t        frm.set_value(\"total_experience\",frm.doc.india_experience)\n\t    }\n\t},\n\toverseas_experience(frm){\n\t    if(frm.doc.india_experience){\n\t    var total = (frm.doc.india_experience + frm.doc.overseas_experience)\n\t    frm.set_value(\"total_experience\",total)\n\t    }\n\t    else{\n\t        frm.set_value(\"total_experience\",frm.doc.overseas_experience)\n\t    }\n\t}\n})\n\n// frappe.ui.form.on('Education Details', {\n// \tschool_univ(cdt,cdn,frm){\n// \t    var child = locals[cdt][cdn]\n// \t    console.log(frm.doc.table_28)\n// \t}\n// })",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Task",
  "enabled": 1,
  "modified": "2021-09-28 21:05:55.866364",
  "name": "Task-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Task', {\n\tonload(frm) {\n\n    \n },\nvalidate: function (frm) {\n\t\tif (frm.doc.task_candidate && frm.doc.customer) {\n\t\t\tfrappe.call({\n\t\t\t\tmethod: 'jobpro.custom.update_candidate_list',\n\t\t\t\targs: {\n\t\t\t\t\t\"candidate\": frm.doc.task_candidate,\n\t\t\t\t\t\"project\":frm.doc.project,\n\t\t\t\t\t\"customer\":frm.doc.customer,\n\t\t\t\t\t\"task\":frm.doc.name\n\t\t\t\t}\n\n\t\t\t})\n\t\t}\n// \t\telse {\n// \t\t\tfrm.trigger(\"calculate\")\n// \t\t}\n\t},\n\tonload: function (frm) {\n\t   // cur_frm.fields_dict['sa_candidate_summary'].grid.wrapper.find('.grid-add-row').hide();\n\t   // cur_frm.fields_dict['sa_candidate_summary'].grid.wrapper.find('.grid-remove-row').hide();\n\t\t},\n\t\n\tstatus: function (frm) {\n\t\tif (frm.doc.status == 'Completed' || frm.doc.status == 'Cancelled') {\n\t\t\tfrm.set_value('sp', 0);\n\t\t}\n\t},\n\trefresh: function (frm) {\n\t\tfrm.clear_table(\"task_candidate\");\n\t\tfrappe.call({\n\t\t\tmethod: \"jobpro.custom.load_candidates\",\n\t\t\targs: {\n\t\t\t\t\"task\": frm.doc.name,\n\t\t\t\t\"project\": frm.doc.project\n\t\t\t},\n\t\t\tcallback: function (r) {\n\t\t\t\t$.each(r.message, function (i, d) {\n\t\t\t\t    if (r.message.length !== 0) {\n\t\t\t\t\t\tvar row = frappe.model.add_child(frm.doc, \"Task Candidate\", \"task_candidate\");\n\t\t\t\t\t\trow.given_name = d.given_name;\n\t\t\t\t\t\trow.mobile =d.mobile_number;\n\t\t\t\t\t\trow.candidate_status = d.pending_for;\n\t\t\t\t\t\trow.address = d.address;\n\t\t\t\t\t\trow.current_location = d.location;\n\t\t\t\t\t\trow.candidate_id = d.name;\n\t\t\t\t\t\trow.passport_number =d.passport_number\n\t\t\t\t\t\trow.sa_name = d.sa_agent;\n\t\t\t\t\t\trow.position=d.position;\n\t\t\t\t\t\trow.customer=d.customer;\n\t\t\t\t\t\trow.territory = d.territory;\n\t\t\t\t\t\trow.project=d.project;\n\t\t\t\t\t\trow.task=d.task;\n\t\t\t\t\t\trow.subject=d.subject\n\t\t\t\t\t\trow.user = d.candidate_created_by;\n\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t refresh_field(\"task_candidate\");\n                frm.trigger(\"calculate\")\n                // frm.save()\n\t\t\t}\n            \n\t\t})\n        if(frm.doc.project){\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"jobpro.custom.sa_candidate\",\n\t\t\t\targs: {\n\t\t\t\t\t\"project\": frm.doc.project,\n\t\t\t\t\t\"task\": frm.doc.name\n\n\t\t\t\t},\n\t\t\t\tcallback: function (r) {\n\t\t\t\t    \n\t\t\t\t\tfrm.clear_table('sa_candidate_summary');\n\t\t\t\t\t$.each(r.message, function (i, d) {\n\n\t\t\t\t\t\tvar row = frappe.model.add_child(frm.doc, \"SA Candidate Summary\", \"sa_candidate_summary\");\n\t\t\t\t\t\trow.sa_id = d.sa_agent;\n\t\t\t\t\t\trow.sa_name = d.sa_agent_name;\n\t\t\t\t\t\trow.sa_mobile = d.sa_mobile_number;\n\t\t\t\t\t\trow.no_candidate = d.achieved_count;\n\t\t\t\t\t\trow.idb = d.selected;\n\t\t\t\t\t\trow.fp = d.fp;\n\t\t\t\t\t    row.sl = d.sl;\n\t\t\t\t\t    row.psl = d.psl;\n\t\t\t\t\t    row.sp = d.sp;\n\t\t\t\t\t    row.total_sa = d.tsa;\n\t\t\t\t\t})\n\t\t\t\t\trefresh_field(\"sa_candidate_summary\");\n\t\t\t\t}\n\n\t\t\t})\n        }\n\n            \n\n// \t\t\tfrappe.call({\n// \t\t\t\tmethod: \"vhrs.custom.get_interview_details\",\n// \t\t\t\targs: {\n// \t\t\t\t\t\"project\": frm.doc.project,\n// \t\t\t\t\t\"task\": frm.doc.name\n// \t\t\t\t},\n// \t\t\t\tcallback: function (r) {\n// \t\t\t\t\tif (r.message) {\n// \t\t\t\t\t\t$.each(r.message.date_and_location || [], function (i, d) {\n// \t\t\t\t\t\t\tvar row = frappe.model.add_child(frm.doc, \"Direct Interview Details\", \"interview_details\");\n// \t\t\t\t\t\t\trow.date = d.date;\n// \t\t\t\t\t\t\trow.location = d.location;\n// \t\t\t\t\t\t})\n// \t\t\t\t\t\trefresh_field(\"interview_details\");\n// \t\t\t\t\t}\n\n// \t\t\t\t}\n// \t\t\t})\n\t},\n\n// \tqualification: function (frm) {\n// \t\tvar a = frm.doc.qualification\n// \t\tfrm.set_value(\"specialization\", a)\n// \t},\n\n\tcalculate: function (frm) {\n\t\tif (frm.doc.task_candidate) {\n\t\t\tvar candidates = frm.doc.task_candidate\n\t\t\tvar idb = 0\n\t\t\tvar sourced = 0\n\t\t\tvar submitted = 0\n\t\t\tvar shortlisted = 0\n\t\t\tvar interviewed = 0\n\t\t\tvar proposed_psl = 0\n\t\t\tvar linedup = 0\n\t\t\tfor (var i in candidates) {\n\t\t\t\tif (candidates[i].candidate_status === 'IDB') {\n\t\t\t\t\tidb = idb + 1;\n\t\t\t\t}\n\t\t\t\tif (candidates[i].candidate_status === 'Sourced') {\n\t\t\t\t\tsourced = sourced + 1;\n\t\t\t\t}\n\t\t\t\tif (candidates[i].candidate_status === 'Submitted') {\n\t\t\t\t\tsubmitted = submitted + 1;\n\t\t\t\t}\n\t\t\t\tif (candidates[i].candidate_status === 'Shortlisted' || candidates[i].candidate_status === 'Client Offered') {\n\t\t\t\t\tshortlisted = shortlisted + 1;\n\t\t\t\t}\n\t\t\t\tif (candidates[i].candidate_status === 'Interviewed') {\n\t\t\t\t\tinterviewed = interviewed + 1;\n\t\t\t\t}\n\t\t\t\tif (candidates[i].candidate_status === 'Proposed PSL') {\n\t\t\t\t\tproposed_psl = proposed_psl + 1;\n\t\t\t\t}\n\t\t\t\tif (candidates[i].candidate_status === 'Linedup') {\n\t\t\t\t\tlinedup = linedup + 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfrm.set_value(\"psl\", proposed_psl);\n\n\t\t\tfrm.set_value(\"fp\", (submitted + interviewed));\n\n\t\t\tfrm.set_value(\"sl\", (shortlisted + linedup));\n\n\t\t\tvar a = frm.doc.vac\n\t\t\tvar b = frm.doc.prop\n\t\t\tvar pps = (frm.doc.vac - frm.doc.psl) * frm.doc.prop - (frm.doc.fp + frm.doc.sl)\n\t\t\tif (frm.doc.status == 'Completed' || frm.doc.status == 'Cancelled') {\n\t\t\t\tfrm.set_value('sp', 0);\n\t\t\t} else {\n\t\t\t\tfrm.set_value(\"sp\", pps);\n\t\t\t}\n// \t\t\tfrm.save()\n\t\t}\n\t}\n\n\n})\n// frappe.ui.form.on('Work Plan', {\n// \tcv_achived: function (frm, cdt, cdn) {\n// \t\tvar child = locals[cdt][cdn]\n// \t\tvar a = (child.cv_achived / child.cv_planed) * 100\n// \t\tfrappe.model.set_value(child.doctype, child.name, \"strike_rate\", a)\n// \t}\n\n// })\n\n// frappe.ui.form.on('Associate Info', {\n// \tlinedup: function (frm, cdt, cdn) {\n// \t\tvar total_alp = 0.0\n// \t\t$.each(frm.doc.associate_lineup || [], function (i, v) {\n// \t\t\tif (v.linedup) {\n// \t\t\t\ttotal_alp += v.linedup\n// \t\t\t}\n// \t\t})\n// \t\tfrm.set_value(\"total_alp\", total_alp)\n// \t}\n// })\n// })",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Project",
  "enabled": 1,
  "modified": "2021-07-20 11:32:56.140170",
  "name": "Project-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "cur_frm.add_fetch(\"customer\", \"payment_details\", \"payment_terms\");\ncur_frm.add_fetch(\"customer\", \"territory\", \"territory\");\ncur_frm.add_fetch(\"customer\", \"account_manager\", \"account_manager\");\nfrappe.ui.form.on('Project', {\n\trefresh(frm) {\n\t\tfrappe.call({\n            method: \"jobpro.custom.project_sa_candidate\",\n            args: {\n                \"project\":frm.doc.name\n                },\n            callback: function (r) {\n                frm.clear_table('sa_candidate_summary');\n                $.each(r.message, function (i, d) {\n                    var row = frappe.model.add_child(frm.doc, \"SA Candidate Summary\", \"sa_candidate_summary\");\n                   \n                    \trow.sa_id = d.sa_agent;\n\t\t\t\t\t\trow.sa_name = d.sa_agent_name;\n\t\t\t\t\t\trow.sa_mobile = d.sa_mobile_number;\n\t\t\t\t\t\trow.no_candidate = d.achieved_count;\n\t\t\t\t\t\trow.idb = d.selected;\n\t\t\t\t\t\trow.fp = d.fp;\n\t\t\t\t\t    row.sl = d.sl;\n\t\t\t\t\t    row.psl = d.psl;\n\t\t\t\t\t    row.sp = d.sp;\n\t\t\t\t\t    row.total_sa = d.tsa;\n\n                })\n                 refresh_field(\"sa_candidate_summary\");\n            }\n        })\n        if (frm.doc.service == \"REC-I\" ||  frm.doc.service == \"REC-D\") {\n            // console.log(\"hi\")\n\t\t\tfrm.add_custom_button(__(\"Broadcast\"), function () {\n\t\t\t     frappe.call({\n            method: \"jobpro.custom.auto_mail_to_sams\",\n            args: {\n              'project':frm.doc.name,\n              'territory':frm.doc.territory\n            },\n            callback: function (r) {\n                // console.log(r.message)\n            }\n\t\t\t\n\t\t})\n        })\n        \n        } \n\t},\n\tvalidate(frm){\n\t   // console.log(\"hi\")\n\t   // var task = frappe.db.get_all(\"Task\",{\"project\":frm.doc.name},[\"*\"])\n\t   // console.log(task)\n\t   frappe.call({\n\t       method:\"teampro.custom.update_task_fields\",\n\t       args:{\n\t           'project':frm.doc.name\n\t       }\n\t   });\n\n\t    if(frm.doc.__islocal){\n\t        frappe.call({\n            method: \"teampro.custom.add_project_id\",\n            args: {\n              'project':frm.doc.name\n            },\n            callback(r){\n             frm.set_value(\"project_id\",r.message)\n            }\n\t    })\n\t    }\n\t    if(frm.doc.status ==\"Completed\" || frm.doc.status ==\"Cancelled\"){\n\t        frappe.call({\n\t            \"method\":\"jobpro.custom.update_task\",\n\t            args:{\n\t                'project':frm.doc.name,\n\t                'status':frm.doc.status\n\t            },\n\t            callback(r){\n\t                if(r.message){\n\t                   // console.log(r.message)\n\t                }\n\t            }\n\t        })\n\t    }\n\t},\n\tproject_type(frm){\n\t    if(frm.doc.project_type == \"Internal\") {\n\t\t\tfrm.set_df_property(\"customer\", \"reqd\", 0);\n\t    }\n\t},\n    onload(frm){\n        if(!frm.doc.__islocal){\n        frappe.call({\n            method: \"jobpro.custom.count_task\",\n            args: {\n              doctype:'Task',\n              'project':frm.doc.name\n            },\n            callback: function (r) {\n                frm.set_value(\"task\",r.message[0])\n                frm.set_value(\"tvac\",r.message[1][0][0])\n                frm.set_value(\"tsp\",r.message[1][0][1])\n                frm.set_value(\"tfp\",r.message[1][0][2])\n                frm.set_value(\"tsl\",r.message[1][0][3])\n                frm.set_value(\"tpsl\",r.message[1][0][4])\n                frm.save()\n            }\n            \n        })\n        }\n       \n    }\n    \n\t\n})\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Appraisal",
  "enabled": 1,
  "modified": "2020-10-08 11:42:48.279842",
  "name": "Appraisal-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Appraisal', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n});\n\nfrappe.ui.form.on('Appraisal Goal', {\n\tachieved_value(frm,cdt,cdn){\n\t    var child = locals[cdt][cdn]\n\t   // console.log(child.achieved_value)\n\t    var a= (child.achieved_value/child.target_value)*100\n\t    var b= (child.achieved_value/child.target_value)*5\n\t   frappe.model.set_value(child.doctype,child.name,\"success_rate\",a);\n\t   frappe.model.set_value(child.doctype,child.name,\"recommended_score\",b);\n\t   \n  frm.refresh_field(\"appraisal_goal\")\n\t    \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2021-04-17 16:54:58.513311",
  "name": "Employee-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Employee', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\temployment_type(frm){\n\tif(frm.doc.employment_type == \"Contract\"){\n\t    frm.set_value(\"naming_series\",\"TC\")\n\t}\n\telse{\n\t    frm.set_value(\"naming_series\",\"TI\")\n\t}\n\t},\n\tbased_on_value(frm,cdt,cdn){\n\t   // console.log(\"hi\")\n\t    if(frm.doc.based_on_value ==\"Role Based\"){\n\t       // console.log(\"hi\")\n\t       var child =locals[cdt][cdn]\n\t       frappe.model.set_value(child.doctype,child.name,\"services\",\"\")\n\t    }\n\t}\n})\n\nfrappe.ui.form.on('Tiips', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\t\tft_rate(frm,cdt,cdn){\n\t   // console.log(\"hi\")\n\t   \n\t   frappe.db.get_value(\"Salary Structure Assignment\",{'employee':frm.doc.name},['base'])\n\t   .then(r=>{\n\t       // console.log(r.message.base)\n\t        var child =locals[cdt][cdn]\n    \t   frappe.model.set_value(child.doctype,child.name,\"ft_value\",child.ft_rate * r.message.base)\n    \t   frm.refresh_field(\"tiips\")\n\t   })\n\t  \n\t   \n\t},\n\t\n\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2021-06-10 18:40:35.239162",
  "name": "Sales Invoice-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh(frm){\n      frm.set_df_property('total_original_dec', \"label\",'Total DEC '+ '(' + frm.doc.currency + ')' )\n       frm.set_df_property('total_dec', \"label\",'Total SC '+ '(' + frm.doc.currency + ')' )\n// \t var default_currency = frappe.get_doc(\"Company\",\"TEAMPRO HR & IT Services Pvt. Ltd.\",['default_currency'])\n// \t console.log(default_currency)\n      frm.set_df_property('total_dec_company_currency', \"label\",'Total DEC '+ '(' + 'INR' + ')' )\n       frm.set_df_property('total_sc_company_currency', \"label\",'Total SC '+ '(' + 'INR' + ')' )\n       \n    },\n \tvalidate(frm) {\n   \t    // console.log(frm.doc.total_dec)\n\tif (frm.doc.currency == \"INR\"){\n\t   // console.log(frm.doc.total_dec)\n\t    frm.set_value(\"total_dec_company_currency\",frm.doc.total_original_dec)\n\t    frm.set_value(\"total_sc_company_currency\",frm.doc.total_dec)\n\t    \n\t}\n\telse{\n\t    var rate = frm.doc.conversion_rate\n\t    var dec = frm.doc.total_original_dec * rate\n\t    var sc = frm.doc.total_dec * rate\n\t    console.log(dec)\n\t    frm.set_value(\"total_dec_company_currency\",dec)\n\t    frm.set_value(\"total_sc_company_currency\",sc)\n\t    \n\t}\n\t},\n\n    services(frm){\n\tif(frm.doc.services == \"BCS\"){\n\t    frm.set_value(\"naming_series\",\"BCS/.####\")\n\t}\n\telse if(frm.doc.services == \"REC\"){\n\t    frm.set_value(\"naming_series\",\"REC-I.####\")\n\t}\n\telse if(frm.doc.services == \"IT-SW\"){\n\t    frm.set_value(\"naming_series\",\"IT-SW/.####\")\n\t}\n\telse if(frm.doc.services == \"EMS\"){\n\t    frm.set_value(\"naming_series\",\"EMS/.####\")\n\t}\n\telse if(frm.doc.services == \"SCP\"){\n\t    frm.set_value(\"naming_series\",\"SCP/.####\")\n\t}\n\telse if(frm.doc.services == \"IT-IS\"){\n\t    frm.set_value(\"naming_series\",\"IT-IS/.####\")\n\t}\n\telse if(frm.doc.services == \"REC-D\"){\n\t    frm.set_value(\"naming_series\",\"REC-D/.####\")\n\t}\n\telse if(frm.doc.services == \"REC-I\"){\n\t    frm.set_value(\"naming_series\",\"REC-I/.####\")\n\t}\n\telse if(frm.doc.services == \"CMN\"){\n\t    frm.set_value(\"naming_series\",\"CMN/.####\")\n\t}\n\telse if(frm.doc.services == \"TGT\"){\n\t    frm.set_value(\"naming_series\",\"TGT/.####\")\n\t}\n\telse if(frm.doc.services == \"NL\"){\n\t    frm.set_value(\"naming_series\",\"NL/.####\")\n\t}\n    },\n   \n});\n\nfrappe.ui.form.on('Sales Invoice Item', {\n    validate(frm,cdt,cdn){\n         if (frm.doc.currency == \"INR\"){\n    \t    frappe.model.set_value(child.doctype,child.name,\"dec_company_currency\",frm.doc.total_original_dec);\n    \t    frappe.model.set_value(child.doctype,child.name,\"sc_company_currency\",frm.doc.total_dec);\n\t    }\n\t    else{\n\t    var rate = frm.doc.conversion_rate\n\t    var dec = frm.doc.total_original_dec * rate\n\t    var sc = frm.doc.total_dec * rate\n\t    frappe.model.set_value(child.doctype,child.name,\"dec_company_currency\",dec);\n\t    frappe.model.set_value(child.doctype,child.name,\"sc_company_currency\",sc);\n\t   \t}\n\t   \tif(child.dec1 >= child.amount){\n\t   \t    frappe.throw(\"DEC Cannot be greater than Amount\")\n\t   \t}\n    },\n    dec1(frm,cdt,cdn){\n\t    var child = locals[cdt][cdn];\n\t    var a=(child.amount-child.dec1);\n\t    frappe.model.set_value(child.doctype,child.name,\"sc1\",a);\n\t    var b =0\n\t    $.each(frm.doc.items,function(i, d) {\n\t        b += Number(d.sc1);\n\t    });\n\t    frm.set_value(\"total_dec\",b);\n\t    var a =0\n\t    $.each(frm.doc.items,function(i, d) {\n\t        a += Number(d.dec1);\n\t    });\n\t    frm.set_value(\"total_original_dec\",a);\n\t    if (frm.doc.currency == \"INR\"){\n    \t    frappe.model.set_value(child.doctype,child.name,\"dec_company_currency\",frm.doc.total_original_dec);\n    \t    frappe.model.set_value(child.doctype,child.name,\"sc_company_currency\",frm.doc.total_dec);\n\t    }\n\t    else{\n\t    var rate = frm.doc.conversion_rate\n\t    var dec = frm.doc.total_original_dec * rate\n\t    var sc = frm.doc.total_dec * rate\n\t    frappe.model.set_value(child.doctype,child.name,\"dec_company_currency\",dec);\n\t    frappe.model.set_value(child.doctype,child.name,\"sc_company_currency\",sc);\n\t   \t}\n\t   \tif(child.dec1 >= child.amount){\n\t   \t    frappe.throw(\"DEC Cannot be greater than Amount\")\n\t   \t}\n\t   \n\t  \n\t},\n\tonload:function(frm, cdt, cdn) {\n\t\tconst row = locals[cdt][cdn];\n\t\tvar current_row = frm.fields_dict[\"items\"].grid.grid_rows_by_docname[row.name];\n\t\tcurrent_row.set_df_property('dec_company_currency',\"label\",'Total DEC '+ '(' + 'INR' + ')' )\n\n\t}\n\t\n\t\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Institutes",
  "enabled": 0,
  "modified": "2021-02-26 09:59:42.803135",
  "name": "Recruitment Institutes-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Recruitment Institutes', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\n\n})\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Institutes",
  "enabled": 1,
  "modified": "2021-02-26 11:44:31.721552",
  "name": "Institutes-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Institutes', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tvalidate(frm){\n\t    var checks=[]\n\t    var check = 0\n\t   // console.log(\"hi\")\n\t    $.each(frm.doc.contact_table, function (i, d) {\n\t\t\tcheck += Number(d.is_primary)\n\t\t\t\n\t\t\t\n\t\t})\n\t\tchecks.push(check)\n\t\tconsole.log(checks)\n\t\tif (checks > 1 ){\n\t\t\tfrappe.throw(\"Primary values should not repeat in contact\");\n\t\t}\n\n\t\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Closure",
  "enabled": 1,
  "modified": "2021-10-05 13:13:03.671003",
  "name": "Closure-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Closure', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\t\n\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employment",
  "enabled": 1,
  "modified": "2021-03-27 11:14:54.321034",
  "name": "Employment-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Employment', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tepi_employer_name:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_employer_name) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Employer Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_employer_name:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_employer_name) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Employer Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_employer_contact:function(frm){\n\t   var regex = /[^0-9\\s]/g;\n\t\tif (regex.test(frm.doc.epi_employer_contact) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Employer Contact: Only Numbers are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_employer_contact:function(frm){\n\t   var regex = /[^0-9\\s]/g;\n\t\tif (regex.test(frm.doc.epi_employer_contact) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Employer Contact: Only Numbers are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_designation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_designation) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Designation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_designation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_designation) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Designation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n    epi_date_of_joining:function(frm){\n        if (frm.doc.epi_date_of_joining > frappe.datetime.get_today()) {\n            frappe.msgprint(__(\"You cannot select past date in From Date\"));\n            frappe.validated = false;\n        }\n    },\n    vpi_date_of_joining:function(frm){\n        if (frm.doc.vpi_date_of_joining > frappe.datetime.get_today()) {\n            frappe.msgprint(__(\"You cannot select past date in From Date\"));\n            frappe.validated = false;\n        }\n    },\n    epi_date_of_relieving:function(frm){\n        if (frm.doc.epi_date_of_relieving > frappe.datetime.get_today()) {\n            frappe.msgprint(__(\"You cannot select past date in From Date\"));\n            frappe.validated = false;\n        }\n    },\n    vpi_date_of_relieving:function(frm){\n        if (frm.doc.vpi_date_of_relieving > frappe.datetime.get_today()) {\n            frappe.msgprint(__(\"You cannot select past date in From Date\"));\n            frappe.validated = false;\n        }\n    },\n    epi_reason_for_leaving:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_reason_for_leaving) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Reason for Leaving: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_reason_for_leaving:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_reason_for_leaving) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Reason for Leaving: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_character_and_conduct:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_character_and_conduct) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Character and Conduct: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_character_and_conduct:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_character_and_conduct) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Character and Conduct: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n    epi_behavior_with_colleagues:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_behavior_with_colleagues) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Behavior with Colleagues: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_behavior_with_colleagues:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_behavior_with_colleagues) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Behavior with Colleagues: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_reporting_persons_name:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_reporting_persons_name) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Reporting Person's Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_reporting_persons_name:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_reporting_persons_name) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Reporting Person's Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_reporting_persons_designation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_reporting_persons_designation) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Reporting Person's Designation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_reporting_persons_designation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_reporting_persons_designation) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Reporting Person's Designation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_verified_by:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_verified_by) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Verified By: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_verified_by:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_verified_by) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Verified By: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_verifier_designation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_verifier_designation) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Verifier Designation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_verifier_designation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_verifier_designation) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Verifier Designation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n})\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Court",
  "enabled": 1,
  "modified": "2021-03-27 11:46:54.046780",
  "name": "Court-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Court', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tepi_social_behaviour:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_social_behaviour) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Social Behaviour: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_social_behaviour:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_social_behaviour) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Social Behaviour: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_civil__magistrate_session_court:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_civil__magistrate_session_court) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Civil/ Magistrate/ Session court: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_civil__magistrate_session_court:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_civil__magistrate_session_court) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Civil/ Magistrate/ Session court: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_high_court:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_high_court) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :High Court: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_high_court:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_high_court) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :High Court: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_year_of_residential:function(frm){\n\t    var regex = /[^0-9\\s]/g;\n\t\tif (regex.test(frm.doc.epi_year_of_residential) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Year of Residential - Years: Only Numbers are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_year_of_residential:function(frm){\n\t    var regex = /[^0-9\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_year_of_residential) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Year of Residential - Years: Only Numbers are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Education",
  "enabled": 1,
  "modified": "2021-03-27 16:31:45.283837",
  "name": "Education-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Education', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tepi_student_name:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_student_name) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Student Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_student_name:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_student_name) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Student Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_college_name:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_college_name) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :College Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_college_name:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_college_name) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :College Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_university_name:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_university_name) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :University Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_university_name:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_university_name) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :University Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_course_period:function(frm){\n\t   var regex =/^[0-9]{4}[\\-]{1}[0-9]{4}$/g;\n\t\tif (!regex.test(frm.doc.epi_course_period) === true) {\n\t\t    console.log(regex)\n\t\t\tfrappe.msgprint(__(\"EPI :Course Period-From-To: Invalid Format.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_course_period:function(frm){\n\t   var regex =/^[0-9]{4}[\\-]{1}[0-9]{4}$/g;\n\t\tif (!regex.test(frm.doc.vpi_course_period) === true) {\n\t\t    console.log(regex)\n\t\t\tfrappe.msgprint(__(\"VPI :Course Period-From-To: Invalid Format.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n    epi_year_of_passed:function(frm){\n\t   var regex =/^[0-9]{2}[\\/]{1}[0-9]{4}$/g;\n\t\tif (!regex.test(frm.doc.epi_year_of_passed) === true) {\n\t\t    console.log(regex)\n\t\t\tfrappe.msgprint(__(\"EPI :Year of Passed: Invalid Format.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_year_of_passed:function(frm){\n\t   var regex =/^[0-9]{2}[\\/]{1}[0-9]{4}$/g;\n\t\tif (!regex.test(frm.doc.vpi_year_of_passed) === true) {\n\t\t    console.log(regex)\n\t\t\tfrappe.msgprint(__(\"VPI :Year of Passed: Invalid Format.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n    epi_communication_skill:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_communication_skill) === true) {\n\t\t    console.log(regex)\n\t\t\tfrappe.msgprint(__(\"EPI :Communication Skill: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_communication_skill:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_communication_skill) === true) {\n\t\t    console.log(regex)\n\t\t\tfrappe.msgprint(__(\"VPI :Communication Skill: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_verified_by:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_verified_by) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Verified By: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_verified_by:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_verified_by) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Verified By: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_designation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_designation) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Designation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_designation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_designation) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Designation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n})\n// [0-9]{2}[\\/]{1}[0-9]{4}$/g\n// /^(0[1-9]|1[0-2])\\/\\d{2}$/.test(s);\n// /^(0[1-9]|1[0-2])\\/\\d{2}$/",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address Check",
  "enabled": 1,
  "modified": "2021-03-27 16:43:10.420819",
  "name": "Address Check-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Address Check', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tepi_pincode: function(frm) {\n\t\t$.ajax({\n\t\t\turl: \"https://api.postalpincode.in/pincode/\"+frm.doc.epi_pincode,\n\t\t\ttype: 'GET',\n\t\t\tdataType: 'json',\n\t\t\tsuccess: function (data, textStatus, xhr) {\n\t\t\t\t// console.log(data[0]['PostOffice'][0])\n\t\t\t\tcur_frm.set_value(\"epi_district\", data[0]['PostOffice'][0]['District'])\n\t\t\t\tcur_frm.set_value(\"epi_state\", data[0]['PostOffice'][0]['State'])\n\t\t\t\tcur_frm.refresh_fields();\n\t\t\t}\n\t\t});\n\t},\n\tvpi_pincode: function(frm) {\n\t\t$.ajax({\n\t\t\turl: \"https://api.postalpincode.in/pincode/\"+frm.doc.vpi_pincode,\n\t\t\ttype: 'GET',\n\t\t\tdataType: 'json',\n\t\t\tsuccess: function (data, textStatus, xhr) {\n\t\t\t\t// console.log(data[0]['PostOffice'][0])\n\t\t\t\tcur_frm.set_value(\"vpi_district\", data[0]['PostOffice'][0]['District'])\n\t\t\t\tcur_frm.set_value(\"vpi_state\", data[0]['PostOffice'][0]['State'])\n\t\t\t\tcur_frm.refresh_fields();\n\t\t\t}\n\t\t});\n\t},\n\tepi_verifier_name:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_verifier_name) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Verifier Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_verifier_name:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_verifier_name) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Verifier Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_relation_with_profile:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_relation_with_profile) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Relation with Profile: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_relation_with_profile:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_relation_with_profile) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Relation with Profile: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_period_of_stay:function(frm){\n\t   var regex =/^[0-9]{2}[\\/]{1}[0-9]{4}[\\-][0-9]{2}[\\/]{1}[0-9]{4}$/g;\n\t\tif (!regex.test(frm.doc.epi_period_of_stay) === true) {\n\t\t    console.log(regex)\n\t\t\tfrappe.msgprint(__(\"EPI :Period of Stay: Invalid Format.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Criminal",
  "enabled": 1,
  "modified": "2021-03-27 16:37:58.336176",
  "name": "Criminal-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Criminal', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tepi_pincode: function(frm) {\n\t\t$.ajax({\n\t\t\turl: \"https://api.postalpincode.in/pincode/\"+frm.doc.epi_pincode,\n\t\t\ttype: 'GET',\n\t\t\tdataType: 'json',\n\t\t\tsuccess: function (data, textStatus, xhr) {\n\t\t\t\t// console.log(data[0]['PostOffice'][0])\n\t\t\t\tcur_frm.set_value(\"epi_district\", data[0]['PostOffice'][0]['District'])\n\t\t\t\tcur_frm.set_value(\"epi_state\", data[0]['PostOffice'][0]['State'])\n\t\t\t\tcur_frm.refresh_fields();\n\t\t\t}\n\t\t});\n\t},\n\tvpi_pincode: function(frm) {\n\t\t$.ajax({\n\t\t\turl: \"https://api.postalpincode.in/pincode/\"+frm.doc.vpi_pincode,\n\t\t\ttype: 'GET',\n\t\t\tdataType: 'json',\n\t\t\tsuccess: function (data, textStatus, xhr) {\n\t\t\t\t// console.log(data[0]['PostOffice'][0])\n\t\t\t\tcur_frm.set_value(\"vpi_district\", data[0]['PostOffice'][0]['District'])\n\t\t\t\tcur_frm.set_value(\"vpi_state\", data[0]['PostOffice'][0]['State'])\n\t\t\t\tcur_frm.refresh_fields();\n\t\t\t}\n\t\t});\n\t},\n\tepi_record_found:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_record_found) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Record Found: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_record_found:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_record_found) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Record Found: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_record_description_if_found:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_record_description_if_found) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Record Description if Found: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_record_description_if_found:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_record_description_if_found) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Record Description if Found: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_name_of_police_station:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_name_of_police_station) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Name of Police Station: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_name_of_police_station:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_name_of_police_station) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Name of Police Station: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_official_name:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_official_name) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Official Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_official_name:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_official_name) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Official Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_official_designation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_official_designation) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Official Designation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_official_designation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_official_designation) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Official Designation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_number_of_years_searched:function(frm){\n\t   var regex =/^[0-9]{4}[\\-]{1}[0-9]{4}$/g;\n\t\tif (!regex.test(frm.doc.epi_number_of_years_searched) === true) {\n\t\t    console.log(regex)\n\t\t\tfrappe.msgprint(__(\"EPI :Number of Years Searched: Invalid Format.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_number_of_years_searched:function(frm){\n\t   var regex =/^[0-9]{4}[\\-]{1}[0-9]{4}$/g;\n\t\tif (!regex.test(frm.doc.vpi_number_of_years_searched) === true) {\n\t\t    console.log(regex)\n\t\t\tfrappe.msgprint(__(\"VPI :Number of Years Searched: Invalid Format.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Family",
  "enabled": 1,
  "modified": "2021-03-27 15:14:19.030061",
  "name": "Family-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Family', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tepi_father_name:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_father_name) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Father Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_father_name:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_father_name) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Father Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_fathers_occupation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_fathers_occupation) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Fathers Occupation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_fathers_occupation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_fathers_occupation) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Fathers Occupation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_fathers_age:function(frm) {\n\t\tif (frm.doc.epi_fathers_age < 18) {\n\t\t\tfrappe.msgprint({\n\t\t\t\ttitle: __('Notification'),\n\t\t\t\tindicator: 'red',\n\t\t\t\tmessage: __(\"Age cannot be lesser than 18\")\n\t\t\t});\n\t\t}\n    },\n\tvpi_fathers_age:function(frm) {\n\t\tif (frm.doc.vpi_fathers_age < 18) {\n\t\t\tfrappe.msgprint({\n\t\t\t\ttitle: __('Notification'),\n\t\t\t\tindicator: 'red',\n\t\t\t\tmessage: __(\"Age cannot be lesser than 18\")\n\t\t\t});\n\t\t}\n    },\n    \n\tepi_mother_name:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_mother_name) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Mother Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_mother_name:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_mother_name) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Mother Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_mothers_occupation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_mothers_occupation) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Mothers Occupation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_mothers_occupation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_mothers_occupation) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Mothers Occupation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_mothers_age:function(frm) {\n\t\tif (frm.doc.epi_mothers_age < 18) {\n\t\t\tfrappe.msgprint({\n\t\t\t\ttitle: __('Notification'),\n\t\t\t\tindicator: 'red',\n\t\t\t\tmessage: __(\"Age cannot be lesser than 18\")\n\t\t\t});\n\t\t}\n    },\n\tvpi_mothers_age:function(frm) {\n\t\tif (frm.doc.vpi_mothers_age < 18) {\n\t\t\tfrappe.msgprint({\n\t\t\t\ttitle: __('Notification'),\n\t\t\t\tindicator: 'red',\n\t\t\t\tmessage: __(\"Age cannot be lesser than 18\")\n\t\t\t});\n\t\t}\n    },\n    \n    epi_brother_name:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_brother_name) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Brother Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_brother_name:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_brother_name) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Brother Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_brothers_occupation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_brothers_occupation) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Brother Occupation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_brothers_occupation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_brothers_occupation) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Brother Occupation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_brothers_age:function(frm) {\n\t\tif (frm.doc.epi_brothers_age < 18) {\n\t\t\tfrappe.msgprint({\n\t\t\t\ttitle: __('Notification'),\n\t\t\t\tindicator: 'red',\n\t\t\t\tmessage: __(\"Age cannot be lesser than 18\")\n\t\t\t});\n\t\t}\n    },\n\tvpi_brothers_age:function(frm) {\n\t\tif (frm.doc.vpi_brothers_age < 18) {\n\t\t\tfrappe.msgprint({\n\t\t\t\ttitle: __('Notification'),\n\t\t\t\tindicator: 'red',\n\t\t\t\tmessage: __(\"Age cannot be lesser than 18\")\n\t\t\t});\n\t\t}\n    },\n    epi_spouse_name:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_spouse_name) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Spouse Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_spouse_name:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_spouse_name) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Spouse Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_spouse_occupation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_spouse_occupation) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Spouse Occupation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_spouse_occupation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_spouse_occupation) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Spouse Occupation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_spouse_age:function(frm) {\n\t\tif (frm.doc.epi_spouse_age < 18) {\n\t\t\tfrappe.msgprint({\n\t\t\t\ttitle: __('Notification'),\n\t\t\t\tindicator: 'red',\n\t\t\t\tmessage: __(\"Age cannot be lesser than 18\")\n\t\t\t});\n\t\t}\n    },\n\tvpi_spouse_age:function(frm) {\n\t\tif (frm.doc.vpi_spouse_age < 18) {\n\t\t\tfrappe.msgprint({\n\t\t\t\ttitle: __('Notification'),\n\t\t\t\tindicator: 'red',\n\t\t\t\tmessage: __(\"Age cannot be lesser than 18\")\n\t\t\t});\n\t\t}\n    },\n});\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Matrimonial",
  "enabled": 1,
  "modified": "2021-03-27 16:01:59.072531",
  "name": "Matrimonial-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Matrimonial', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tepi_job_profile:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_job_profile) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Job Profile, Salary and Reputation in the Work Place: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_job_profile:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_job_profile) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Job Profile, Salary and Reputation in the Work Place: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_character_and_daily_routine:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_character_and_daily_routine) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Character and Daily Routine: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_character_and_daily_routine:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_character_and_daily_routine) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Character and Daily Routine: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_temperamental_details:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_temperamental_details) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Temperamental Details: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_temperamental_details:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_temperamental_details) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Temperamental Details: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_social_recognition:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_social_recognition) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Social Recognition: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_social_recognition:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_social_recognition) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Social Recognition: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_occupationeducational_background:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_occupationeducational_background) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Occupation/Educational Background: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_occupationeducational_background:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_occupationeducational_background) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Occupation/Educational Background: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_family_background_and_financial_status:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_family_background_and_financial_status) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Family Background and Financial Status: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_family_background_and_financial_status:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_family_background_and_financial_status) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Family Background and Financial Status: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_details_of_any_criminal_background:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_details_of_any_criminal_background) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Details of Any Criminal Background: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_details_of_any_criminal_background:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_details_of_any_criminal_background) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Details of Any Criminal Background: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_medical_history:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_medical_history) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Medical History: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_medical_history:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_medical_history) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Medical History: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_lifestyle:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_lifestyle) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Lifestyle: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_lifestyle:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_lifestyle) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Lifestyle: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_social_status:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_social_status) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Social Status: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_social_status:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_social_status) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Social Status: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_past_brokenunbroken_marriage:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_past_brokenunbroken_marriage) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Past Broken/Unbroken Marriage: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_past_brokenunbroken_marriage:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_past_brokenunbroken_marriage) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Past Broken/Unbroken Marriage: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_relations_with_other_menwomen:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_relations_with_other_menwomen) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Relations with Other Men/Women: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_relations_with_other_menwomen:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_relations_with_other_menwomen) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Relations with Other Men/Women: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Integrity",
  "enabled": 1,
  "modified": "2021-03-27 15:59:33.154673",
  "name": "Integrity-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Integrity', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tepi_how_prompt_are_you:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_how_prompt_are_you) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :How prompt are you: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_how_prompt_are_you:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_how_prompt_are_you) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :How prompt are you: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_in_what_business_work_related_situation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_in_what_business_work_related_situation) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :In what business/work-related situation do you feel honesty would be inappropriate?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_in_what_business_work_related_situation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_in_what_business_work_related_situation) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :In what business/work-related situation do you feel honesty would be inappropriate?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_do_you_feel_guilty:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_do_you_feel_guilty) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Do you feel guilty when you do something you should not do?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_do_you_feel_guilty:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_do_you_feel_guilty) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Do you feel guilty when you do something you should not do?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_do_you_believe_most_employers_take_advantage:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_do_you_believe_most_employers_take_advantage) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Do you believe most employers take advantage of the people who work for them?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_do_you_believe_most_employers_take_advantage:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_do_you_believe_most_employers_take_advantage) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Do you believe most employers take advantage of the people who work for them?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_what_would_you_do_if_someone_asked_you_to_do:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_what_would_you_do_if_someone_asked_you_to_do) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :What would you do if someone asked you to do something unethical?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_what_would_you_do_if_someone_asked_you_to_do:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_what_would_you_do_if_someone_asked_you_to_do) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :What would you do if someone asked you to do something unethical?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_do_you_like_decision_of_your_management_always:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_do_you_like_decision_of_your_management_always) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Do you like decision of your management always?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_do_you_like_decision_of_your_management_always:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_do_you_like_decision_of_your_management_always) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Do you like decision of your management always?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\t\n\tepi_if_you_saw_a_co_worker_doing_something:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_if_you_saw_a_co_worker_doing_something) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :If you saw a co-worker doing something dishonest, would you tell your supervisor? What would you do about it?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_if_you_saw_a_co_worker_doing_something:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_if_you_saw_a_co_worker_doing_something) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :If you saw a co-worker doing something dishonest, would you tell your supervisor? What would you do about it?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_are_you_an_optimist:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_are_you_an_optimist) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Are you an optimist?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_are_you_an_optimist:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_are_you_an_optimist) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Are you an optimist?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_do_you_always_listen_to_your_parents:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_do_you_always_listen_to_your_parents) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Do you always listen to your parents?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_do_you_always_listen_to_your_parents:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_do_you_always_listen_to_your_parents) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Do you always listen to your parents?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_do_you_believe_in_late_working_hours:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_do_you_believe_in_late_working_hours) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Do you believe in late working hours ?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_do_you_believe_in_late_working_hours:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_do_you_believe_in_late_working_hours) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Do you believe in late working hours ?: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Social Media",
  "enabled": 1,
  "modified": "2021-03-27 16:11:38.690235",
  "name": "Social Media-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Social Media', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tepi_familiar_with_social_media:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_familiar_with_social_media) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Familiar with Social Media: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n    vpi_familiar_with_social_media:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_familiar_with_social_media) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Familiar with Social Media: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_types_of_social_media:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_types_of_social_media) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Types of Social Media: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_types_of_social_media:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_types_of_social_media) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Types of Social Media: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_subject_interested:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_subject_interested) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Subject Interested: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_subject_interested:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_subject_interested) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Subject Interested: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tepi_type_of_contacts:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.epi_type_of_contacts) === true) {\n\t\t\tfrappe.msgprint(__(\"EPI :Type of Contacts: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tvpi_type_of_contacts:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.vpi_type_of_contacts) === true) {\n\t\t\tfrappe.msgprint(__(\"VPI :Type of Contacts: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "BG Entry Form",
  "enabled": 1,
  "modified": "2021-08-03 14:03:29.792319",
  "name": "BG Entry Form-Form",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('BG Entry Form', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\temployee_name:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.employee_name) === true) {\n\t\t\tfrappe.msgprint(__(\"Employee Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tfathers_name:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.fathers_name) === true) {\n\t\t\tfrappe.msgprint(__(\"Father's Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tcollege_name:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.college_name) === true) {\n\t\t\tfrappe.msgprint(__(\"college Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tuniversity_name:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.university_name) === true) {\n\t\t\tfrappe.msgprint(__(\"University Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\temployer_name:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.employer_name) === true) {\n\t\t\tfrappe.msgprint(__(\"Employer Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tname_as_in_proof:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.name_as_in_proof) === true) {\n\t\t\tfrappe.msgprint(__(\"Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tfather_name_as_in_proof:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.father_name_as_in_proof) === true) {\n\t\t\tfrappe.msgprint(__(\"Father's Name: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tcourse_period:function(frm){\n\t   var regex =/^[0-9]{4}[\\-]{1}[0-9]{4}$/g;\n\t\tif (!regex.test(frm.doc.course_period) === true) {\n\t\t    console.log(regex)\n\t\t\tfrappe.msgprint(__(\"Course Period-From-To: Invalid Format.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tperiod_of_employment:function(frm){\n\t   var regex =/^[0-9]{4}[\\-]{1}[0-9]{4}$/g;\n\t\tif (!regex.test(frm.doc.period_of_employment) === true) {\n\t\t    console.log(regex)\n\t\t\tfrappe.msgprint(__(\"period_of_employment-From-To: Invalid Format.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tyear_of_passed:function(frm){\n\t   var regex =/^[0-9]{2}[\\/]{1}[0-9]{4}$/g;\n\t\tif (!regex.test(frm.doc.year_of_passed) === true) {\n\t\t    console.log(regex)\n\t\t\tfrappe.msgprint(__(\"Year of Passed: Invalid Format.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tdesignation:function(frm){\n\t    var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.designation) === true) {\n\t\t\tfrappe.msgprint(__(\"Designation: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tdegree:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.degree) === true) {\n\t\t\tfrappe.msgprint(__(\"Degree: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tspecialization:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.specialization) === true) {\n\t\t\tfrappe.msgprint(__(\"Specialization: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\temployment_type:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.employment_type) === true) {\n\t\t\tfrappe.msgprint(__(\"Employment_type: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tregister_no_id_no:function(frm){\n\t   var regex =/^[0-9]{4}[\\-]{1}[0-9]{4}$/g;\n\t\tif (!regex.test(frm.doc.register_no_id_no) === true) {\n\t\t    console.log(regex)\n\t\t\tfrappe.msgprint(__(\"Register No./ ID No.: Invalid Format.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\temployee_code:function(frm){\n\t   var regex =/^[0-9]{4}[\\-]{1}[0-9]{4}$/g;\n\t\tif (!regex.test(frm.doc.employee_code) === true) {\n\t\t    console.log(regex)\n\t\t\tfrappe.msgprint(__(\"Employee Code: Invalid Format.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tctc_drawn:function(frm){\n\t   var regex =/^[0-9]{4}[\\-]{1}[0-9]{4}$/g;\n\t\tif (!regex.test(frm.doc.ctc_drawn) === true) {\n\t\t    console.log(regex)\n\t\t\tfrappe.msgprint(__(\"CTC Drawn: Invalid Format.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\tdate_of_birth_as_in_proof:function(frm){\n        if (frm.doc.date_of_birth_as_in_proof > frappe.datetime.add_months(frappe.datetime.now_date(),-18*12)) {\n            frappe.msgprint(__(\"You have to be at least 18 years old to proceed\"));\n            frappe.validated = false;\n        }\n\t\n    },\n    date_of_birth:function(frm){\n        if (frm.doc.date_of_birth > frappe.datetime.add_months(frappe.datetime.now_date(),-18*12)) {\n            frappe.msgprint(__(\"You have to be at least 18 years old to proceed\"));\n            frappe.validated = false;\n        }\n\t\n    },\n    client_employee_code:function(frm){\n\t   var regex = /[^A-Za-z\\s]/g;\n\t\tif (regex.test(frm.doc.client_employee_code) === true) {\n\t\t\tfrappe.msgprint(__(\"Employee Code: Only Alphabets are allowed.\"));\n\t\t\tfrappe.validated = false;\n\t\t}\n\t},\n\texperince:function(frm){\n\t    if(frm.doc.experience==\"fresher\"){\n\t        console.log(frm)\n\t    }\n\t    \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lead",
  "enabled": 1,
  "modified": "2021-07-27 13:01:37.124466",
  "name": "Lead-Form",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Lead', {\n    onload:function(frm){\n        if(frm.doc.status == \"Converted\"){\n      console.log(frm)\n      frm.set_read_only()\n      console.log('hi')\n  }\n    },\n\trefresh(frm) {\n\t\tfrm.set_query('region', () => {\n    return {\n        filters: {\n            territory: frm.doc.territory\n        }\n      \n        \n    }\n})\n  \n\t},\n    \tvalidation_status(frm){\n    \t   if(frm.doc.validation_status =='Dormant'){\n    \t   frm.set_value(\"status\",\"Do Not Contact\")\n    \t}\n    \t},\n    // \tcontact_by(frm){\n    // \t    frm.set_value(\"lead_owner\",frm.doc.contact_by)\n\n\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Opportunity",
  "enabled": 1,
  "modified": "2021-08-12 12:36:39.076315",
  "name": "Opportunity-Form",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Opportunity', {\n\trefresh(frm) {\n\t\tif(frm.doc.__islocal){\n\t\t    frm.set_value(\"lead_owner\",frappe.session.user)\n\t\t    frm.set_value(\"account__manager\",frappe.session.user)\n\t\t}\n\t}\n\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Expense Claim",
  "enabled": 1,
  "modified": "2021-10-08 18:17:58.099291",
  "name": "Expense Claim-Form",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Expense Claim', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\n\nfrappe.ui.form.on('Expense Claim Detail', {\n    km(frm,cdt,cdn){\n        var child = locals[cdt][cdn]\n        child.amount = child.km * 2.75\n        frm.refresh_field('expenses')\n    }\n\t\n})",
  "view": "Form"
 }
]